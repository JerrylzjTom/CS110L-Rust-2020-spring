Example 1:
```
fn main() {
    let mut s = String::from("hello");
    let ref1 = &s;
    let ref2 = &ref1;
    let ref3 = &ref2;
    s = String::from("goodbye");
    println!("{}", ref3.to_uppercase());
}
The 's' has been borrowed for 'let ref1 = &s', s can not be borrowed twice.
```



Example 2:
```
fn drip_drop() -> &String {
    let s = String::from("hello world!");
    return &s;
}
This function's return type contains a borrowed value, but there is no value for it to be borrowed from.
modified:
fn drip_drop() -> String {
    let s = String::from("hello world");
    return s;
}
This move the 's' to the new borrowed value;
```



Example 3:
```
fn main() {
    let s1 = String::from("hello");
    let mut v = Vec::new();
    v.push(s1);
    let s2: String = v[0];
    println!("{}", s2);
}
v[0] can't be moved.
modified:
let s2: String = &v[0] or v[0].clone()
```
